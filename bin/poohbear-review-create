#!/usr/bin/env ruby

require 'highline/import'
require 'base64'
require 'gitit'
require 'polarbear'
require 'polarbear/model/review'

#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
def usage
  puts 'Commands for creating a new review.'
  exit 0
end

#-----------------------------------------------------------------------------
# ................ A R G U M E N T S .. P R O C E S S I N G .................
#-----------------------------------------------------------------------------

#-----------------------------------------------------------------------------
# Will try to infer the source control mechanism if possible and call.
#-----------------------------------------------------------------------------
options = {}

optparse = OptionParser.new do |opts|
  # Set a banner, displayed at the top of the help screen.
  opts.banner = 'Usage: poohbear create [options]'

  # Define the options, and what they do
  options[:title] = nil
  opts.on('-t', '--title title', 'review title') do |title|
    options[:title] = title
  end

  options[:reviewers] = []
  opts.on('-r', '--reviewers reva,revb,revc', 'list of reviewers') do |reviewers|
    options[:reviewers] = reviewers
  end

  options[:observers] = []
  opts.on('-o', '--observers reva,revb,revc', 'list of observers') do |observers|
    options[:observers] = observers
  end

  options[:base_branch] = nil
  opts.on('-b', '--base_branch branch', 'base branch name') do |branch|
    options[:base_branch] = branch
  end

  options[:current_branch] = nil
  opts.on('-c', '--current_branch branch', 'current branch name') do |branch|
    options[:current_branch] = branch
  end

  options[:usage] = nil
  opts.on( '-u', '--usage', 'Print one liner about this script' ) do
    options[:usage] = true
  end

  options[:diffargs] = nil
  opts.on( '-x', '--diffargs ARGS', String, 'Instead of diffing 2 branches, diff using whatever is passed in [GIT DIFF ARGS]') do |diffarguments|
    options[:diffargs] = diffarguments || ''
  end

  options[:auto_answer] = nil
  opts.on( '-y', '--auto_answer', 'Won\'t prompt the user for anything and rely on args and defaults' ) do
    options[:auto_answer] = true
  end

  opts.on( '-v', '--verbose', 'Verbose ') do
    options[:loglevel] = :info
  end

  # This displays the help screen, all programs are assumed to have this
  # option.
  opts.on( '-h', '--help', 'Display this screen' ) do
    puts opts
    exit
  end
end

#-----------------------------------------------------------------------------
# Parse the command-line. Remember there are two forms of the parse method.
# The 'parse' method simply parses ARGV, while the 'parse!' method parses
# ARGV and removes any options found there, as well as any parameters for the
# the options. What's left is the list of files to resize.
#-----------------------------------------------------------------------------
begin
  optparse.parse!
rescue => ex
  puts ex.to_s
  exit 1
end

usage if options[:usage]

# Do some validation
_gitit = Gitit::Git.new(Dir.pwd)
unless _gitit.repo.valid?
  p 'poohbear must be run from a folder that is a valid git repo'
  exit 1
end

# Prepare our default thing
begin
  _reviewers = _gitit.config.get_value('poohbear.reviewers')
  _observers = _gitit.config.get_value('poohbear.observers')
rescue
  _reviewers = ''
  _observers = ''
end

_current_branch = _gitit.branches.get_current_branch
_base_branch = _gitit.branches.exists_locally?('develop') ? 'develop' : 'master'

# Ask user if we have to.
if options[:auto_answer]
  options[:title] = _current_branch if options[:title].nil?
  options[:reviewers] = _reviewers if options[:reviewers].empty?
  options[:observers] = _observers if options[:observers].empty?
  options[:base_branch] = _base_branch if options[:base_branch].nil?
  options[:current_branch] = _current_branch if options[:current_branch].nil?
else
  options[:title] = ask('title: ') { |q| q.default = _current_branch } if options[:title].nil?
  options[:reviewers] = ask('reviewers (coma separated): ') { |q| q.default = _reviewers } if options[:reviewers].empty?
  options[:observers] = ask('observers: ') { |q| q.default = _observers } if options[:observers].empty?
  if options[:diffargs].nil?
    options[:base_branch] = ask('base branch diffing against: ') { |q| q.default = _base_branch } if options[:base_branch].nil?
    options[:current_branch] = ask('current branch diffed against base_branch: ') { |q| q.default = _current_branch } if options[:current_branch].nil?
  end
end

# Create the review
begin
  _codecollab = PolarBear::CodeCollab.new
  new_review = _codecollab.create_review(
      :title => options[:title],
      :author => _codecollab.configuration.username,
      :reviewers => options[:reviewers].split(','),
      :observers => options[:observers].split(',')
  )

  if options[:diffargs].nil?
    new_review.add_git_diff(options[:base_branch], options[:current_branch])
  else
    new_review.add_git_diff_with_args(options[:diffargs])
  end
rescue => ex
  p ex.to_s
  exit 1
end

# Remember our settings
_gitit.config.set_value("branch.#{_current_branch}.reviewid", new_review.id)
_gitit.config.set_value("branch.#{_current_branch}.diffargs", new_review.diff_args)

p "Review successfully created.  Id is: #{new_review.id}"
exit 0
